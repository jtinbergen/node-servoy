{"version":3,"sources":["../src/globals.ts","../src/JSColumn.ts","../src/JSDataSet.ts","../src/JSRecord.ts","../src/JSFoundSet.ts","../src/DatabaseManagerInstance.ts","../src/PostgresServer.ts","../src/JSTable.ts","../src/application.ts","../src/constants.ts","../src/DatabaseManager.ts","../src/utils.ts","../src/datasources.ts","../src/plugins/http.ts","../src/plugins/mail.ts","../src/plugins/file.ts","../src/plugins/rawSQL.ts","../src/utils/parser.ts","../src/index.ts"],"sourcesContent":["const sqlTextField = (text: string, maxLength: number) => {\r\n    let sanitizedText = text\r\n        .replace(/&gt;/g, '>')\r\n        .replace(/&lt;/g, '<')\r\n        .replace(/&amp;/g, '&')\r\n        .replace(/&quot;/g, '\"')\r\n        .replace(/&apos;/g, \"'\");\r\n    if (maxLength < sanitizedText.length) {\r\n        sanitizedText = sanitizedText.substring(0, maxLength);\r\n    }\r\n\r\n    sanitizedText = sanitizedText.replace(/'/g, \"''\");\r\n    return `'${sanitizedText}'`;\r\n};\r\n\r\nfunction format(arg: string) {\r\n    const args = Array.prototype.slice.call(arguments, 1);\r\n    return arg.replace(/{(\\d+)}/g, (match, number) =>\r\n        typeof args[number] !== 'undefined' ? args[number] : match,\r\n    );\r\n}\r\n\r\nconst sql = (query: string, args: any[]) => {\r\n    let result = query;\r\n    while (result.indexOf('?') > -1) {\r\n        let arg = args.shift();\r\n        if (typeof arg === 'string') {\r\n            arg = `'${arg}'`;\r\n        }\r\n\r\n        result = result.replace('?', arg);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport { sqlTextField, format, sql };\r\n","export enum JSColumn {\r\n    DATABASE_IDENTITY = 0,\r\n    DATABASE_SEQUENCE = 1,\r\n    DATETIME = 2,\r\n    EXCLUDED_COLUMN = 3,\r\n    INTEGER = 4,\r\n    MEDIA = 5,\r\n    NONE = 6,\r\n    NUMBER = 7,\r\n    PK_COLUMN = 8,\r\n    ROWID_COLUMN = 9,\r\n    SERVOY_SEQUENCE = 10,\r\n    TENANT_COLUMN = 14,\r\n    TEXT = 11,\r\n    UUID_COLUMN = 12,\r\n    UUID_GENERATOR = 13,\r\n}\r\n","import { JSColumn } from './JSColumn';\r\n\r\nexport type JSDatasetParameters = {\r\n    rows?: string;\r\n    columns?: string;\r\n};\r\n\r\nexport class ColumnInfo {\r\n    name: string;\r\n    type: JSColumn;\r\n    position?: any;\r\n    default?: any;\r\n    nullable?: any;\r\n    length?: any;\r\n    primary?: any;\r\n\r\n    constructor({ name, type }: { name?: string; type?: JSColumn } = {}) {\r\n        this.name = name || '?column?';\r\n        this.type = type || JSColumn.TEXT;\r\n    }\r\n}\r\n\r\nexport class JSDataSet {\r\n    rowIndex: number = 0;\r\n    rows: any[] = [];\r\n    columns: any[] = [];\r\n\r\n    /**\r\n     * Creates a new instance of the JSDataSet class.\r\n     * @param json Optional JSON object to initialize the dataset with.\r\n     */\r\n    constructor(json?: JSDatasetParameters) {\r\n        if (!(this instanceof JSDataSet)) {\r\n            return new JSDataSet();\r\n        }\r\n\r\n        if (json && json.rows && json.columns) {\r\n            this.rows = JSON.parse(json.rows);\r\n            this.columns = JSON.parse(json.columns);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the number of rows in the dataset.\r\n     * @returns {number} The maximum row index of the dataset.\r\n     */\r\n    public getMaxRowIndex(): number {\r\n        return this.rows.length;\r\n    }\r\n\r\n    /**\r\n     * Get the number of columns in the dataset.\r\n     * @returns {number} The maximum column index of the dataset.\r\n     */\r\n    public getMaxColumnIndex(): number {\r\n        return this.columns.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the type of the column at the specified index.\r\n     * @param index The index of the column to get the type of.\r\n     * @returns {JSColumn} The type of the column at the specified index, or null if the index is out of range.\r\n     */\r\n    public getColumnType(index: number): JSColumn {\r\n        return index >= 1 && index <= this.columns.length ? this.columns[index - 1].type : null;\r\n    }\r\n\r\n    /**\r\n     * Returns the name of the column at the specified index.\r\n     * @param index The index of the column to retrieve the name for.\r\n     * @returns {string} The name of the column at the specified index, or null if the index is out of range.\r\n     */\r\n    public getColumnName(index: number): string {\r\n        return index >= 1 && index <= this.columns.length ? this.columns[index - 1].name : null;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of column names for this dataset.\r\n     * @returns {string[]} An array of column names.\r\n     */\r\n    public getColumnNames(): string[] {\r\n        const names = [];\r\n        for (let i = 0; i < this.getMaxColumnIndex(); i += 1) {\r\n            names.push(this.columns[i].name);\r\n        }\r\n\r\n        return names;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the dataset.\r\n     * @param name The name of the column. If not provided, a default name will be used.\r\n     * @param index The index at which to insert the new column. If not provided, the column will be added to the end of the dataset.\r\n     * @param type The type of the column.\r\n     */\r\n    public addColumn(name?: string, index?: number, type?: JSColumn) {\r\n        const col = new ColumnInfo({ name: name || 'unnamed', type });\r\n\r\n        if (index && index >= 1 && index <= this.columns.length) {\r\n            this.columns.splice(index - 1, 0, col);\r\n            return;\r\n        }\r\n\r\n        this.columns.push(col);\r\n    }\r\n\r\n    /**\r\n     * Add a row to the dataset.\r\n     * @param index The index at which to insert the new row. If not provided, the row will be added to the end of the dataset.\r\n     * @param array The array of values to add to the row.\r\n     */\r\n    public addRow(index: number | any[], array?: any[]) {\r\n        if (index instanceof Array) {\r\n            array = index;\r\n            index = -1;\r\n        }\r\n\r\n        if (index >= 1 && index <= this.rows.length) {\r\n            this.rows.splice(index - 1, 0, array);\r\n            return;\r\n        }\r\n\r\n        if (array) {\r\n            for (let i = 0; i < array.length; i += 1) {\r\n                const type = this.getColumnType(i + 1);\r\n                if (type === JSColumn.NUMBER) {\r\n                    array[i] =\r\n                        array[i] && typeof array[i] !== 'number' ? parseFloat(array[i]) : array[i];\r\n                }\r\n            }\r\n\r\n            this.rows.push(array);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a row from the dataset at the specified index.\r\n     * @param index The index of the row to remove.\r\n     */\r\n    public removeRow(index: number) {\r\n        if (index >= 1 && index <= this.rows.length) {\r\n            this.rows.splice(index - 1, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the dataset as an html table.\r\n     * @param escape_values If true, replaces illegal HTML characters with corresponding valid escape sequences.\r\n     * @param escape_spaces If true, replaces text spaces with non-breaking space tags ( ) and tabs by four non-breaking space tags.\r\n     * @param multi_line_markup If true, multiLineMarkup will enforce new lines that are in the text; single new lines will be replaced by <br>, multiple new lines will be replaced by <p>\r\n     * @param pretty_indent If true, adds indentation for more readable HTML code.\r\n     * @param add_column_names If false, column headers will not be added to the table.\r\n     * @returns {string} The dataset as an HTML table.\r\n     */\r\n    public getAsHTML(\r\n        escape_values: boolean,\r\n        escape_spaces: boolean,\r\n        multi_line_markup: boolean,\r\n        pretty_indent: boolean,\r\n        add_column_names: boolean,\r\n    ): string {\r\n        let html = '';\r\n        html += `<p>Lines: ${this.getMaxRowIndex()}</p>`;\r\n        html += '<table>';\r\n        if (add_column_names) {\r\n            const columnNames = this.getColumnNames();\r\n            html += '<tr style=\"background-color: #dddddd\">';\r\n            html += '<th style=\"font-style: italic color: gray\">Index</th>';\r\n            for (let i = 0; i < columnNames.length; i++) {\r\n                html += `<th style=\"text-align: left\">${columnNames[i]}</th>`;\r\n            }\r\n\r\n            html += '</tr>';\r\n        }\r\n\r\n        for (let row = 0; row < this.rows.length; row += 1) {\r\n            html += '<tr>';\r\n            const style = row % 2 === 0 ? 'background-color: #eff3fe' : '';\r\n            html += `<td style=\"${style} font-style: italic color: gray\">${(\r\n                row + 1\r\n            ).toFixed()}</td>`;\r\n            for (let col = 0; col < this.columns.length; col += 1) {\r\n                let value = this.rows[row][col];\r\n                if (!value) value = '';\r\n                html += `<td style=\"${style}\">${value}</td>`;\r\n            }\r\n\r\n            html += '</tr>';\r\n        }\r\n\r\n        html += '</table>';\r\n        return html;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of values for a given column index.\r\n     * @param column The index of the column to retrieve values from.\r\n     * @returns An array of values for the given column index, or null if the column index is out of range.\r\n     */\r\n    public getColumnAsArray(column: number): any[] | null {\r\n        const values = [];\r\n        if (column < 1 || column > this.getMaxColumnIndex()) {\r\n            return null;\r\n        }\r\n\r\n        for (let i = 0; i < this.rows.length; i += 1) {\r\n            if (column >= 1 && column <= this.columns.length + 1) {\r\n                values.push(this.rows[i][column - 1]);\r\n            }\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * Returns the specified row as an array.\r\n     * @param row The index of the row to retrieve (1-based).\r\n     * @returns An array containing the values of the specified row, or null if the row index is out of range.\r\n     */\r\n    public getRowAsArray(row: number): any[] | null {\r\n        if (row < 1 || row > this.getMaxRowIndex()) {\r\n            return null;\r\n        }\r\n\r\n        return [...this.rows[row - 1]];\r\n    }\r\n\r\n    /**\r\n     * Returns the value at the specified row and column index.\r\n     * @param row The row index (1-based).\r\n     * @param col The column index (1-based).\r\n     * @returns The value at the specified row and column index, or null if the indexes are out of range.\r\n     */\r\n    public getValue(row: number, col: number): any {\r\n        if (col < 1 || col > this.getMaxColumnIndex()) {\r\n            return null;\r\n        }\r\n\r\n        if (row < 1 || row > this.getMaxRowIndex()) {\r\n            return null;\r\n        }\r\n\r\n        return this.rows[row - 1][col - 1];\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a cell in the dataset.\r\n     * @param row The row index of the cell to set (1-based).\r\n     * @param col The column index of the cell to set (1-based).\r\n     * @param value The value to set in the cell.\r\n     * @returns The value that was set in the cell.\r\n     */\r\n    public setValue(row: number, col: number, value: any) {\r\n        if (col < 1 || col > this.getMaxColumnIndex()) {\r\n            return null;\r\n        }\r\n\r\n        if (row < 1 || row > this.getMaxRowIndex()) {\r\n            return null;\r\n        }\r\n\r\n        this.rows[row - 1][col - 1] = value;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Removes a column from the dataset.\r\n     * @param col The index of the column to remove.\r\n     */\r\n    public removeColumn(col: number) {\r\n        if (col < 1 || col > this.getMaxColumnIndex()) {\r\n            return;\r\n        }\r\n\r\n        this.columns.splice(col - 1, 1);\r\n        for (let row = 0; row < this.rows.length; row += 1) {\r\n            this.rows[row].splice(col - 1, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sorts the rows of the dataset based on the values in the specified column.\r\n     * @param col The index of the column to sort by.\r\n     * @param sort_direction If true, sorts the rows in ascending order. If false, sorts the rows in descending order.\r\n     */\r\n    public sort(col: number, sort_direction: boolean) {\r\n        this.rows = this.rows.sort((a, b) => {\r\n            if (a[col - 1] < b[col - 1]) return sort_direction ? -1 : 1;\r\n            if (a[col - 1] > b[col - 1]) return sort_direction ? 1 : -1;\r\n            return 0;\r\n        });\r\n    }\r\n}\r\n","import { JSDataSet } from './JSDataSet';\r\nimport { JSFoundSet } from './JSFoundSet';\r\nimport { JSRecordMarkers } from './JSRecordMarkers';\r\n\r\ntype Target = { unsavedChanges: any[]; [key: string]: any };\r\n\r\nexport class JSRecord {\r\n    exception: string | null;\r\n    foundset: JSFoundSet;\r\n    recordMarkers: JSRecordMarkers;\r\n    unsavedChanges: any[];\r\n    [key: string]: any;\r\n\r\n    constructor({\r\n        databaseManager,\r\n        foundset,\r\n        record,\r\n    }: {\r\n        databaseManager: any;\r\n        foundset: JSFoundSet;\r\n        record: any;\r\n    }) {\r\n        this.exception = null;\r\n        this.foundset = foundset;\r\n        this.unsavedChanges = [];\r\n        for (let field in record) {\r\n            this[field] = record[field];\r\n        }\r\n\r\n        this.recordMarkers = this.createMarkers();\r\n    }\r\n\r\n    public createMarkers(): JSRecordMarkers {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public getChangedData(): JSDataSet {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public getDataSource(): string {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public getPKs(): any[] {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public hasChangedData(): boolean {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public isEditing(): boolean {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public isNew(): boolean {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public isRelatedFoundSetLoaded(relationName: string): boolean {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public revertChanges(): void {\r\n        throw new Error('Not implemented');\r\n    }\r\n}\r\n\r\nconst isFunction = (functionToCheck: Function) => {\r\n    const getType = {};\r\n    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\r\n};\r\n\r\nexport const recordProxyHandler = {\r\n    get: (target: Target, propertyName: string) => {\r\n        let propertyValue = target[propertyName];\r\n        target.unsavedChanges.forEach((change) => {\r\n            if (change.propertyName === propertyName) {\r\n                propertyValue = change.propertyValue;\r\n            }\r\n        });\r\n\r\n        if (isFunction(propertyValue)) {\r\n            propertyValue = propertyValue.bind(target);\r\n        }\r\n\r\n        return propertyValue;\r\n    },\r\n    set: (target: Target, propertyName: string, propertyValue: any) => {\r\n        target.unsavedChanges.push(\r\n            Object.assign({\r\n                modificationDate: new Date(),\r\n                propertyName: propertyName,\r\n                propertyValue: propertyValue,\r\n            }),\r\n        );\r\n        return true;\r\n    },\r\n};\r\n","import { JSRecord, recordProxyHandler } from './JSRecord';\r\nimport { DatabaseManagerInstance } from './DatabaseManagerInstance';\r\nimport { JSTable } from './JSTable';\r\n\r\nexport type JSFoundSetParameters = {\r\n    databaseManager: DatabaseManagerInstance;\r\n    tableName: string;\r\n    serverName: string;\r\n    table: JSTable;\r\n};\r\n\r\nexport class JSFoundSet {\r\n    databaseManager: DatabaseManagerInstance;\r\n    tableName: string;\r\n    serverName: string;\r\n    alldataproviders: string[];\r\n    multiSelect: boolean;\r\n    records: Map<number, JSRecord>;\r\n    selectedIndexes: number[];\r\n\r\n    /**\r\n     * Creates a new instance of the JSFoundSet class.\r\n     * @param parameters The parameters for the new instance.\r\n     */\r\n    constructor({ databaseManager, tableName, serverName, table }: JSFoundSetParameters) {\r\n        this.databaseManager = databaseManager;\r\n        this.tableName = tableName;\r\n        this.serverName = serverName;\r\n        this.alldataproviders = table.getColumnNames();\r\n        this.multiSelect = false;\r\n        this.records = new Map();\r\n        this.selectedIndexes = [];\r\n    }\r\n\r\n    /**\r\n     * Get the records in the given range.\r\n     * @param from The start index (1-based).\r\n     * @param to The end index (1-based).\r\n     */\r\n    public async getRecords(from: number, to: number): Promise<void> {\r\n        const dataset = await this.databaseManager.getDataSetByQuery(\r\n            this.serverName,\r\n            `SELECT * FROM ${this.tableName} OFFSET ${from} LIMIT ${to - from}`,\r\n            [],\r\n            -1,\r\n        );\r\n\r\n        for (let row = 1; row <= dataset.getMaxRowIndex(); row += 1) {\r\n            const record: any = { _state: 0 };\r\n            const columnNames = dataset.getColumnNames();\r\n            columnNames.forEach((columnName: string, columnIndex: number) => {\r\n                record[columnNames[columnIndex]] = dataset.getValue(row, columnIndex + 1);\r\n            });\r\n\r\n            const jsrecord = new JSRecord({\r\n                databaseManager: this.databaseManager,\r\n                foundset: this,\r\n                record,\r\n            });\r\n\r\n            const recordProxy: any = new Proxy(jsrecord, recordProxyHandler);\r\n            this.records.set(row + from, recordProxy);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the record object at the given index.\r\n     * @param recordIndex Index\trecord index (1-based).\r\n     * @returns {JSRecord} Record.\r\n     */\r\n    async getRecord(recordIndex: number): Promise<JSRecord | null | undefined> {\r\n        if (!this.records.has(recordIndex)) {\r\n            const page = {\r\n                from: Math.floor(recordIndex / 200) * 200,\r\n                to: (Math.floor(recordIndex / 200) + 1) * 200,\r\n            };\r\n            await this.getRecords(page.from, page.to);\r\n        }\r\n\r\n        return this.records.has(recordIndex) ? this.records.get(recordIndex) : null;\r\n    }\r\n\r\n    /**\r\n     * Create a new record on top of the foundset and change selection to it. Returns -1 if the record can't be made.\r\n     * @returns {number} The index of the new record.\r\n     */\r\n    public newRecord(): number {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    /**\r\n     * Get the number of records in this foundset.\r\n     * @returns {number} The number of records in this foundset.\r\n     */\r\n    public async getSize(): Promise<number> {\r\n        const dataset = await this.databaseManager.getDataSetByQuery(\r\n            this.serverName,\r\n            `SELECT COUNT(*) FROM ${this.tableName}`,\r\n            [],\r\n            -1,\r\n        );\r\n\r\n        return dataset.getValue(1, 1);\r\n    }\r\n}\r\n","import { JSDataSet } from './JSDataSet';\r\nimport { JSFoundSet } from './JSFoundSet';\r\nimport { DatabaseManager } from './DatabaseManager';\r\n\r\ntype Filter = {\r\n    serverName: string;\r\n    tableName: string;\r\n    dataprovider: string;\r\n    operator: string;\r\n    value: string;\r\n    name: string;\r\n};\r\n\r\nexport class DatabaseManagerInstance {\r\n    DatabaseManager: DatabaseManager;\r\n    autoSave: boolean;\r\n    aliasMapping: Map<string, string>;\r\n    globalFilters: { [key: string]: Filter[] };\r\n\r\n    constructor({ DatabaseManager }: { DatabaseManager: DatabaseManager }) {\r\n        this.DatabaseManager = DatabaseManager;\r\n        this.autoSave = false;\r\n        this.aliasMapping = new Map();\r\n        this.globalFilters = {};\r\n    }\r\n\r\n    public aliasedServerName(serverName: string) {\r\n        let mappedAlias = serverName;\r\n        if (this.aliasMapping.has(serverName)) {\r\n            const serverAlias = this.aliasMapping.get(serverName);\r\n            if (serverAlias) {\r\n                mappedAlias = serverAlias;\r\n            }\r\n        }\r\n\r\n        return mappedAlias;\r\n    }\r\n\r\n    public async getTableNames(serverName: string) {\r\n        const dataset = await this.getDataSetByQuery(\r\n            serverName,\r\n            \"SELECT table_name FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE'\",\r\n            [],\r\n            -1,\r\n        );\r\n        return dataset.getColumnAsArray(1);\r\n    }\r\n\r\n    public getAutoSave() {\r\n        return this.autoSave;\r\n    }\r\n\r\n    public async getDatabaseProductName(serverName: string) {\r\n        const server = this.DatabaseManager.getServer(this.aliasedServerName(serverName));\r\n        if (!server) {\r\n            throw new Error(`Server ${serverName} not found`);\r\n        }\r\n\r\n        return server.getDatabaseProductName(() => {});\r\n    }\r\n\r\n    public switchServer(sourceName: string, destinationName: string) {\r\n        this.aliasMapping.set(sourceName, destinationName);\r\n    }\r\n\r\n    public addTableFilterParam(\r\n        serverName: string,\r\n        tableName: string,\r\n        dataprovider: string,\r\n        operator: string,\r\n        value: string,\r\n        name: string,\r\n    ) {\r\n        this.globalFilters[serverName] = this.globalFilters[serverName] || [];\r\n        this.globalFilters[serverName].push({\r\n            serverName,\r\n            tableName,\r\n            dataprovider,\r\n            operator,\r\n            value,\r\n            name,\r\n        });\r\n    }\r\n\r\n    public getTableFilterParams(serverName: string) {\r\n        return this.globalFilters[serverName].map((filter) => [\r\n            filter.tableName,\r\n            filter.dataprovider,\r\n            filter.operator,\r\n            filter.value,\r\n            filter.name,\r\n        ]);\r\n    }\r\n\r\n    public async getDataSetByQuery(\r\n        serverName: string,\r\n        sqlQuery: string,\r\n        args: any[],\r\n        maxReturnedRows: number,\r\n        callback?: Function,\r\n    ): Promise<JSDataSet> {\r\n        const server = this.DatabaseManager.getServer(this.aliasedServerName(serverName));\r\n        if (!server) {\r\n            throw new Error(`Server ${serverName} not found`);\r\n        }\r\n\r\n        const client = await server.getClient();\r\n        const result = await client.getDataSetByQuery(sqlQuery, args, maxReturnedRows);\r\n\r\n        if (callback) {\r\n            callback(result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public async getFoundSet(serverName: string, tableName: string) {\r\n        return new JSFoundSet({\r\n            databaseManager: this,\r\n            table: await this.DatabaseManager.getTable(serverName, tableName),\r\n            serverName,\r\n            tableName,\r\n        });\r\n    }\r\n\r\n    public createEmptyDataSet() {\r\n        return new JSDataSet();\r\n    }\r\n\r\n    public startTransaction() {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public rollbackTransaction() {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public commitTransaction() {\r\n        throw new Error('Not implemented');\r\n    }\r\n}\r\n","import * as pg from 'pg';\r\nimport { JSColumn } from './JSColumn';\r\nimport { JSDataSet } from './JSDataSet';\r\nimport { JSTable } from './JSTable';\r\nimport { DatabaseManager } from './DatabaseManager';\r\nimport { DatabaseManagerInstance } from './DatabaseManagerInstance';\r\nimport { sleep } from './application';\r\n\r\nexport class PostgresServer {\r\n    settings: any;\r\n    tables: Map<string, JSTable>;\r\n    pg_types: { [key: number]: JSColumn };\r\n    openConnections: pg.Client[];\r\n    availableConnections: pg.Client[];\r\n    databaseManagerInstance: DatabaseManagerInstance;\r\n\r\n    constructor(databaseManagerInstance: DatabaseManagerInstance, settings: any) {\r\n        this.databaseManagerInstance = databaseManagerInstance;\r\n        this.settings = settings;\r\n        this.tables = new Map();\r\n        this.pg_types = {\r\n            16: JSColumn.NUMBER,\r\n            19: JSColumn.TEXT,\r\n            20: JSColumn.NUMBER,\r\n            21: JSColumn.NUMBER,\r\n            23: JSColumn.NUMBER,\r\n            25: JSColumn.TEXT,\r\n            705: JSColumn.TEXT,\r\n            1082: JSColumn.DATETIME,\r\n            1114: JSColumn.DATETIME,\r\n            1184: JSColumn.DATETIME,\r\n            1043: JSColumn.TEXT,\r\n            1700: JSColumn.NUMBER,\r\n        };\r\n        this.openConnections = [];\r\n        this.availableConnections = [];\r\n    }\r\n\r\n    public getOpenConnectionCount() {\r\n        return this.openConnections.length;\r\n    }\r\n\r\n    public getAvailableConnectionCount() {\r\n        return this.availableConnections.length;\r\n    }\r\n\r\n    public connectToDatabase(): Promise<pg.Client> {\r\n        let client = this.availableConnections.pop();\r\n        if (client) {\r\n            return Promise.resolve(client);\r\n        }\r\n\r\n        if (this.openConnections.length < this.settings.poolSize) {\r\n            return new Promise((resolve, reject) => {\r\n                client = new pg.Client(this.settings.connectionString);\r\n                this.openConnections.push(client);\r\n                client.connect((err) => {\r\n                    if (err) {\r\n                        this.openConnections = this.openConnections.filter((c) => c !== client);\r\n                        reject(err);\r\n                        return;\r\n                    }\r\n\r\n                    resolve(client as pg.Client);\r\n                });\r\n            });\r\n        }\r\n\r\n        return new Promise(async (resolve) => {\r\n            let done = false;\r\n            while (!done) {\r\n                const availableClient = this.availableConnections.pop();\r\n                if (availableClient) {\r\n                    done = true;\r\n                    resolve(availableClient);\r\n                    return;\r\n                }\r\n                await sleep(10);\r\n            }\r\n        });\r\n    }\r\n\r\n    public closeAllConnections() {\r\n        this.openConnections.map((connection) => {\r\n            connection.end();\r\n        });\r\n        this.availableConnections.map((connection) => {\r\n            connection.end();\r\n        });\r\n\r\n        this.availableConnections = [];\r\n        this.openConnections = [];\r\n    }\r\n\r\n    public async getDatabaseProductName(callback: Function) {\r\n        return this.databaseManagerInstance.getDataSetByQuery(\r\n            'postgres',\r\n            'select version()',\r\n            [],\r\n            1,\r\n            (err: Error, result: JSDataSet) => {\r\n                callback(err, result.getValue(1, 1));\r\n            },\r\n        );\r\n    }\r\n\r\n    public async getTables() {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public sql(query: string, args: any) {\r\n        while (query.indexOf('?') > -1) {\r\n            let arg = args.shift();\r\n            if (typeof arg === 'string') {\r\n                arg = `'${arg}'`;\r\n            }\r\n\r\n            query = query.replace('?', arg);\r\n        }\r\n\r\n        return query;\r\n    }\r\n\r\n    public async getClient() {\r\n        return {\r\n            getDataSetByQuery: async (\r\n                sqlQuery: string,\r\n                args: any[],\r\n                maxReturnedRows: number,\r\n            ): Promise<JSDataSet> => {\r\n                const client = await this.connectToDatabase();\r\n                return new Promise((resolve, reject) => {\r\n                    client.query(\r\n                        this.sql(sqlQuery, args),\r\n                        [],\r\n                        (err: Error, result: pg.QueryResult) => {\r\n                            if (err) {\r\n                                return reject(err);\r\n                            }\r\n\r\n                            this.availableConnections.push(client);\r\n                            const dataset = new JSDataSet();\r\n                            result.fields.forEach((field: any, index: number) => {\r\n                                dataset.addColumn(\r\n                                    field.name,\r\n                                    index + 1,\r\n                                    this.convertToJSColumn(field.dataTypeID, field.name),\r\n                                );\r\n                            });\r\n\r\n                            result.rows.forEach((record) => {\r\n                                if (\r\n                                    dataset.getMaxRowIndex() < maxReturnedRows ||\r\n                                    maxReturnedRows === -1\r\n                                ) {\r\n                                    dataset.addRow(\r\n                                        result.fields.map((field) => record[field.name]),\r\n                                    );\r\n                                }\r\n                            });\r\n\r\n                            return resolve(dataset);\r\n                        },\r\n                    );\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public convertToJSColumn(pgType: JSColumn, name: string) {\r\n        if (this.pg_types[pgType] === undefined) {\r\n            throw new Error(`Unknown dataTypeID: ${pgType.toString()} (${name})`);\r\n        }\r\n\r\n        return this.pg_types[pgType];\r\n    }\r\n\r\n    public async getTable(serverName: string, tableName: string) {\r\n        const table = new JSTable({\r\n            databaseManager: new DatabaseManager(),\r\n            serverName,\r\n            tableName,\r\n            server: this,\r\n        });\r\n\r\n        await table.initialize();\r\n        return table;\r\n    }\r\n}\r\n","import { ColumnInfo } from './JSDataSet';\r\nimport { DatabaseManager } from './DatabaseManager';\r\n\r\nexport class JSTable {\r\n    server: any;\r\n    tableName: string;\r\n    databaseManager: DatabaseManager;\r\n    serverName: string;\r\n    columns: ColumnInfo[];\r\n\r\n    constructor({\r\n        databaseManager,\r\n        tableName,\r\n        serverName,\r\n        server,\r\n    }: {\r\n        databaseManager: DatabaseManager;\r\n        tableName: string;\r\n        serverName: string;\r\n        server: any;\r\n    }) {\r\n        this.server = server;\r\n        this.tableName = tableName;\r\n        this.databaseManager = databaseManager;\r\n        this.serverName = serverName;\r\n        this.columns = [];\r\n    }\r\n\r\n    async initialize() {\r\n        const tableInformationQuery = (tableName: string) => `\r\n            WITH pkey AS (\r\n                SELECT\r\n                    information_schema.constraint_column_usage.table_catalog,\r\n                    information_schema.constraint_column_usage.table_schema,\r\n                    information_schema.constraint_column_usage. TABLE_NAME,\r\n                    information_schema.constraint_column_usage. COLUMN_NAME\r\n                FROM\r\n                    information_schema.constraint_column_usage\r\n                JOIN information_schema.table_constraints ON (\r\n                    table_constraints. CONSTRAINT_NAME = constraint_column_usage. CONSTRAINT_NAME\r\n                    AND table_constraints.constraint_type = 'PRIMARY KEY'\r\n                )\r\n                WHERE\r\n                    (\r\n                        information_schema.constraint_column_usage. TABLE_NAME = '${tableName}'\r\n                        AND information_schema.constraint_column_usage.table_schema = 'public'\r\n                    )\r\n            ) SELECT\r\n                information_schema. COLUMNS.*,\r\n                (CASE WHEN pkey.column_name IS NOT NULL THEN true ELSE false END) AS is_primary_key \r\n            FROM\r\n                information_schema. COLUMNS\r\n            LEFT JOIN pkey ON (\r\n                pkey. COLUMN_NAME = information_schema. COLUMNS . COLUMN_NAME\r\n                AND pkey.table_schema = information_schema. COLUMNS .table_schema\r\n            )\r\n            WHERE\r\n             information_schema. COLUMNS . TABLE_NAME = '${tableName}'\r\n        `;\r\n\r\n        const client = await this.server.getClient();\r\n        const dataset = await client.getDataSetByQuery(\r\n            tableInformationQuery(this.tableName),\r\n            [],\r\n            -1,\r\n        );\r\n\r\n        for (let index = 1; index <= dataset.getMaxRowIndex(); index += 1) {\r\n            this.columns.push({\r\n                name: dataset.getValue(index, 4),\r\n                position: dataset.getValue(index, 5),\r\n                default: dataset.getValue(index, 6),\r\n                nullable: dataset.getValue(index, 7),\r\n                type: dataset.getValue(index, 8),\r\n                length: dataset.getValue(index, 9),\r\n                primary: dataset.getValue(index, 28),\r\n            });\r\n        }\r\n    }\r\n\r\n    public getColumn(columnName: string) {\r\n        return this.columns.filter((column) => column.name === columnName)[0];\r\n    }\r\n\r\n    public getColumnNames() {\r\n        return this.columns.map((column) => column.name);\r\n    }\r\n\r\n    public getDataSource() {\r\n        return `db:/${this.serverName}/${this.tableName}`;\r\n    }\r\n\r\n    public getQuotedSQLName() {\r\n        return this.serverName;\r\n    }\r\n\r\n    public getRowIdentifierColumnNames() {}\r\n\r\n    public getSQLName() {\r\n        return this.tableName;\r\n    }\r\n\r\n    public getServerName() {\r\n        return this.serverName;\r\n    }\r\n\r\n    public isMetadataTable() {\r\n        return false;\r\n    }\r\n}\r\n","import * as os from 'os';\r\nimport * as uuid from 'uuid';\r\nimport { spawn } from 'child_process';\r\nimport { LOGGINGLEVEL, APPLICATION_TYPES } from './constants';\r\n\r\nconst execProgram = async (cmd: string, args: string, options: any): Promise<string> =>\r\n    new Promise((resolve, reject) => {\r\n        let stdout = '';\r\n        let stderr = '';\r\n        const childprocess = spawn(cmd, args.split(' '), options);\r\n        childprocess.stdout.on('data', (data) => {\r\n            stdout += data.toString();\r\n        });\r\n\r\n        childprocess.stderr.on('data', (data) => {\r\n            stderr += data.toString();\r\n        });\r\n\r\n        childprocess.on('close', (code) => {\r\n            const result = { code, stdout, stderr };\r\n            if (code !== 0) {\r\n                return reject(JSON.stringify(result));\r\n            }\r\n\r\n            return resolve(JSON.stringify(result));\r\n        });\r\n    });\r\n\r\n/**\r\n * Execute a program and returns output. Specify the cmd as you would do in a console.\r\n * @param program Full path of the program to execute.\r\n * @param params An array of strings as program arguments.\r\n * @param environmentVars Array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process.\r\n * @param cwd The working directory of the subprocess, or null if the subprocess should inherit the working directory of the current process.\r\n * @returns {string} The output generated by the program execution.\r\n */\r\nconst executeProgram = async (\r\n    program: string,\r\n    params: string,\r\n    environmentVars: string[],\r\n    cwd: any,\r\n): Promise<string> => {\r\n    const env: any = {};\r\n    environmentVars.forEach((variable) => {\r\n        const parts = variable.split('=');\r\n        env[parts[0]] = parts[1];\r\n    });\r\n\r\n    return execProgram(program, params, {\r\n        env,\r\n        cwd,\r\n    });\r\n};\r\n\r\n/**\r\n * Execute a program in the background. Specify the cmd as you would do in a console.\r\n * @param program Full path of the program to execute.\r\n * @param params An array of strings as program arguments.\r\n * @param environmentVars Array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process.\r\n * @param cwd The working directory of the subprocess, or null if the subprocess should inherit the working directory of the current process.\r\n * @returns {string} The output generated by the program execution.\r\n */\r\nconst executeProgramInBackground = (\r\n    program: string,\r\n    params: string,\r\n    environmentVars: string[],\r\n    cwd: any,\r\n) => {\r\n    const env: any = {};\r\n    environmentVars.forEach((variable) => {\r\n        const parts = variable.split('=');\r\n        env[parts[0]] = parts[1];\r\n    });\r\n\r\n    execProgram(program, params, {\r\n        env,\r\n        cwd,\r\n    });\r\n};\r\n\r\n/**\r\n * Stop and exit application.\r\n */\r\nconst exit = () => {\r\n    process.exit();\r\n};\r\n\r\n/**\r\n * Get the application type.\r\n * @returns {number} Constant application type.\r\n */\r\nconst getApplicationType = (): number => APPLICATION_TYPES.HEADLESS_CLIENT;\r\n\r\n/**\r\n * Get the name of the localhost.\r\n * @returns {string} Name of the localhost.\r\n */\r\nconst getHostName = (): string => os.hostname();\r\n\r\n/**\r\n * Returns the name of the operating system of the client.\r\n * @returns {string} Name of the operating system of the client.\r\n */\r\nconst getOSName = (): string => os.type();\r\n\r\n/**\r\n * Returns a date object initialized on server with current date and time.\r\n * @returns {Date} Server time.\r\n */\r\nconst getServerTimeStamp = (): Date => new Date();\r\n\r\n/**\r\n * Gets the HTTP server URL.\r\n * @returns {string} The HTTP server URL.\r\n */\r\nconst getServerURL = (): string => `http://${os.hostname()}`;\r\n\r\n/**\r\n * Returns the name of the current solution.\r\n * @returns {string} Current solution name.\r\n */\r\nconst getSolutionName = (): string => 'node-servoy';\r\n\r\n/**\r\n * Get the solution release number.\r\n * @returns {number} Current solution release number.\r\n */\r\nconst getSolutionRelease = (): number => 1;\r\n\r\n/**\r\n * Returns a new Date object representing the current date and time.\r\n * @returns {Date} A Date object representing the current date and time.\r\n */\r\nconst getTimeStamp = (): Date => new Date();\r\n\r\n/**\r\n * Get a new UUID object (also known as GUID) or convert the parameter (that can be string or byte array) to an UUID object.\r\n * @param arg Optional string or byte array to convert to an UUID.\r\n * @returns String and byte array representing an UUID.\r\n */\r\nconst getUUID = (arg: string): { toString: () => string; toBytes: () => ArrayBuffer } => {\r\n    const uuidString = arg || uuid.v4();\r\n    const uuidBuffer = Buffer.from(uuidString);\r\n    return {\r\n        toString: () => uuidString,\r\n        toBytes: () => uuidBuffer,\r\n    };\r\n};\r\n\r\n/**\r\n * Returns the application version.\r\n * @returns {string} Application version.\r\n */\r\nconst getVersion = (): string => '1';\r\n\r\n/**\r\n * Returns true if the solution is running in the developer.\r\n * @returns {boolean} True if the solution is running in the developer, false otherwise.\r\n */\r\nconst isInDeveloper = (): boolean => false;\r\n\r\n/**\r\n * Output something on the out stream.\r\n * @param msg Object to send to output stream.\r\n * @param level The log level where it should log to.\r\n */\r\nconst output = (msg: any, level: LOGGINGLEVEL) => {\r\n    switch (level) {\r\n        case LOGGINGLEVEL.DEBUG:\r\n        case LOGGINGLEVEL.INFO:\r\n            console.log(msg);\r\n            break;\r\n        case LOGGINGLEVEL.WARNING:\r\n            console.warn(msg);\r\n            break;\r\n        case LOGGINGLEVEL.ERROR:\r\n            console.error(msg);\r\n            break;\r\n        default:\r\n            console.log(msg);\r\n    }\r\n};\r\n\r\n/**\r\n * Sleep for specified time (in milliseconds).\r\n * @param ms Sleep time in milliseconds.\r\n */\r\nconst sleep = (ms: number): Promise<number> => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\nexport {\r\n    executeProgram,\r\n    executeProgramInBackground,\r\n    exit,\r\n    getApplicationType,\r\n    getHostName,\r\n    getOSName,\r\n    getServerTimeStamp,\r\n    getServerURL,\r\n    getSolutionName,\r\n    getSolutionRelease,\r\n    getTimeStamp,\r\n    getUUID,\r\n    getVersion,\r\n    isInDeveloper,\r\n    output,\r\n    sleep,\r\n};\r\n","enum LOGGINGLEVEL {\r\n    DEBUG = 0,\r\n    INFO = 1,\r\n    WARNING = 2,\r\n    ERROR = 3,\r\n    FATAL = 4,\r\n}\r\n\r\nenum APPLICATION_TYPES {\r\n    HEADLESS_CLIENT = 0,\r\n    MOBILE_CLIENT = 1,\r\n    NG_CLIENT = 2,\r\n    RUNTIME_CLIENT = 3,\r\n    SMART_CLIENT = 4,\r\n    WEB_CLIENT = 5,\r\n}\r\n\r\nexport { LOGGINGLEVEL, APPLICATION_TYPES };\r\n","import { DatabaseManagerInstance } from './DatabaseManagerInstance';\r\nimport { PostgresServer } from './PostgresServer';\r\n\r\ntype Server = {\r\n    name: string;\r\n    poolSize?: number;\r\n    connectionString: string;\r\n};\r\n\r\nexport class DatabaseManager {\r\n    servers: Map<string, PostgresServer>;\r\n    autoSave: boolean;\r\n\r\n    constructor() {\r\n        this.servers = new Map();\r\n        this.autoSave = false;\r\n    }\r\n\r\n    public registerServer(server: Server) {\r\n        if (!server.name) {\r\n            throw new Error('name property is required.');\r\n        }\r\n\r\n        if (!server.connectionString) {\r\n            throw new Error('connectionString property is required.');\r\n        }\r\n\r\n        this.servers.set(\r\n            server.name,\r\n            new PostgresServer(this.getInstance(), {\r\n                ...{ poolSize: 1, standbySize: 1 },\r\n                ...server,\r\n            }),\r\n        );\r\n    }\r\n\r\n    public unregisterServer(serverName: string) {\r\n        if (!serverName) {\r\n            throw new Error('name property is required.');\r\n        }\r\n\r\n        const server = this.servers.get(serverName);\r\n        if (server) {\r\n            server.closeAllConnections();\r\n            this.servers.delete(serverName);\r\n        }\r\n    }\r\n\r\n    public getServer(serverName: string) {\r\n        return this.servers.get(serverName);\r\n    }\r\n\r\n    public async getTable(serverName: string, tableName: string) {\r\n        const server = this.getServer(serverName);\r\n        if (!server) {\r\n            throw new Error(`Server ${serverName} not found`);\r\n        }\r\n\r\n        return server.getTable(serverName, tableName);\r\n    }\r\n\r\n    public setAutoSave(autoSave: boolean) {\r\n        this.autoSave = autoSave;\r\n        return this.autoSave;\r\n    }\r\n\r\n    public getInstance() {\r\n        return new DatabaseManagerInstance({\r\n            DatabaseManager: this,\r\n        });\r\n    }\r\n}\r\n","/**\r\n * Returns a string containing the character for the unicode number.\r\n * @param unicodeCharacterNumber The number indicating the unicode character.\r\n * @returns {string} A string containing the unicode character.\r\n */\r\nconst getUnicodeCharacter = (unicodeCharacterNumber: number): string => {\r\n    return String.fromCharCode(unicodeCharacterNumber);\r\n};\r\n\r\n/**\r\n * Format a number to have a defined fraction.\r\n * @param number The number to format.\r\n * @param digits Number of digits.\r\n * @returns {string} The resulting number in text.\r\n */\r\nconst numberFormat = (number: number, digits: number): string => {\r\n    return number.toFixed(digits);\r\n};\r\n\r\n/**\r\n * Replaces a portion of a string with replacement text from a specified index.\r\n * @param text The text to process.\r\n * @param start The start index to work from.\r\n * @param size The size of the text to replace.\r\n * @param replacementText The replacement text.\r\n * @returns {string} The changed text.\r\n */\r\nconst stringIndexReplace = (\r\n    text: string,\r\n    start: number,\r\n    size: number,\r\n    replacementText: string,\r\n): string => {\r\n    return `${text.substring(0, start - 1)}${replacementText}${text.substring(start + size - 1)}`;\r\n};\r\n\r\n/**\r\n * Returns all words starting with capital chars.\r\n * @param text The text to process.\r\n * @returns {string} The changed text.\r\n */\r\nconst stringInitCap = (text: string): string => {\r\n    return (text || '').replace(/(?:^|\\s)\\S/g, (a) => {\r\n        return a.toUpperCase();\r\n    });\r\n};\r\n\r\n/**\r\n * Returns a string with the requested number of characters, starting from the left.\r\n * @param text The text to process.\r\n * @param size The size of the text to return.\r\n * @returns {string} The resulting text.\r\n */\r\nconst stringLeft = (text: string, size: number): string => {\r\n    return (text || '').substring(0, size);\r\n};\r\n\r\n/**\r\n * Returns a substring from the original string.\r\n * @param text The text to process.\r\n * @param start The start index to work from.\r\n * @param size The size of the text to return.\r\n * @returns {string} The resulting text.\r\n */\r\nconst stringMiddle = (text: string, start: number, size: number): string => {\r\n    return (text || '').substring(start - 1, start - 1 + size);\r\n};\r\n\r\n/**\r\n * Returns a string with the requested number of characters, starting from the right.\r\n * @param text The text to process.\r\n * @param size The size of the text to return.\r\n * @returns {string} The resulting text.\r\n */\r\nconst stringRight = (text: string, size: number): string => {\r\n    return text.substring(text.length - size);\r\n};\r\n\r\n/**\r\n * Returns the string without leading or trailing spaces.\r\n * @param textString The text to process.\r\n * @returns {string} The resulting trimmed string.\r\n */\r\nconst stringTrim = (textString: string): string => {\r\n    return (textString || '').trim();\r\n};\r\n\r\n/**\r\n * Returns the number of words in the text string.\r\n * @param text The text to process\r\n * @returns {number} The word count.\r\n */\r\nconst stringWordCount = (text: string): number => {\r\n    return (text || '').split(' ').length;\r\n};\r\n\r\n/**\r\n * Returns the number of words, starting from the left.\r\n * @param text The text to process.\r\n * @param numberOfWords The number of words to return.\r\n * @returns {string} The string with number of words from the left.\r\n */\r\nconst stringLeftWords = (text: string, numberOfWords: number): string => {\r\n    return text.split(' ').slice(0, numberOfWords).join(' ');\r\n};\r\n\r\n/**\r\n * Returns a substring from the original string.\r\n * @param text The text to process.\r\n * @param start The start index to work from.\r\n * @param numberOfWords The number of words to return.\r\n * @returns {string} The resulting text.\r\n */\r\nconst stringMiddleWords = (text: string, start: number, numberOfWords: number): string => {\r\n    return text\r\n        .split(' ')\r\n        .slice(start - 1, start - 1 + numberOfWords)\r\n        .join(' ');\r\n};\r\n\r\n/**\r\n * Returns the number of words, starting from the right.\r\n * @param text The text to process.\r\n * @param numberOfWords The number of words to return.\r\n * @returns {string} The string with number of words from the right.\r\n */\r\nconst stringRightWords = (text: string, numberOfWords: number): string => {\r\n    return text.split(' ').slice(-numberOfWords).join(' ');\r\n};\r\n\r\n/**\r\n * Filters characters out of from a string and leaves digits, returns the number. Decimal separator is specified as parameter.\r\n * @param textString The text to process.\r\n * @param decimalSeparator Decimal separator.\r\n * @returns {number} The resulting number.\r\n */\r\nconst stringToNumber = (textString: string, decimalSeparator: string): number => {\r\n    return parseFloat((textString || '').replace(/[^0-9.]/g, '').replace('.', decimalSeparator));\r\n};\r\n\r\n/**\r\n * Returns the number of times searchString appears in textString.\r\n * @param text The text to process.\r\n * @param toSearchFor The string to search for.\r\n * @returns {number} The number of times the search string is found in the text.\r\n */\r\nconst stringPatternCount = (text: string, toSearchFor: string): number => {\r\n    return (text.match(new RegExp(toSearchFor, 'g')) || []).length;\r\n};\r\n\r\n/**\r\n * Returns the position of the string to search for, from a certain start position and occurrence.\r\n * @param textString The text to process.\r\n * @param toSearchFor The string to search.\r\n * @param start The start index to search from.\r\n * @param occurrence The occurence.\r\n * @returns {number} The position of the string to search for.\r\n */\r\nconst stringPosition = (\r\n    textString: string,\r\n    toSearchFor: string,\r\n    start: number,\r\n    occurrence: number,\r\n): number => {\r\n    const positions = [];\r\n    let pos = textString.indexOf(toSearchFor, start - 1);\r\n    while (pos !== -1) {\r\n        positions.push(pos);\r\n        pos = textString.indexOf(toSearchFor, pos + 1);\r\n    }\r\n\r\n    return positions[occurrence - 1] + 1 || -1;\r\n};\r\n\r\n/**\r\n * Replaces a portion of a string with replacement text.\r\n * @param text The text to process.\r\n * @param searchText The string to search.\r\n * @param replacementText The replacement text.\r\n * @returns {string} The changed text.\r\n */\r\nconst stringReplace = (text: string, searchText: string, replacementText: string): string => {\r\n    return text.replace(new RegExp(searchText, 'g'), replacementText);\r\n};\r\n\r\nexport {\r\n    getUnicodeCharacter,\r\n    numberFormat,\r\n    stringIndexReplace,\r\n    stringInitCap,\r\n    stringLeft,\r\n    stringMiddle,\r\n    stringRight,\r\n    stringTrim,\r\n    stringWordCount,\r\n    stringLeftWords,\r\n    stringMiddleWords,\r\n    stringRightWords,\r\n    stringToNumber,\r\n    stringPatternCount,\r\n    stringPosition,\r\n    stringReplace,\r\n};\r\n","const db: any[] = [];\r\nconst mem: any[] = [];\r\n\r\nexport { db, mem };\r\n","import * as https from 'https';\r\nimport * as http from 'http';\r\nimport * as url from 'url';\r\n\r\nclass HttpResponse {\r\n    data: any;\r\n    headers: any;\r\n    statusCode: any;\r\n\r\n    constructor({ data, statusCode, headers }: { data: any; statusCode: any; headers: any }) {\r\n        this.data = data;\r\n        this.headers = headers;\r\n        this.statusCode = statusCode;\r\n    }\r\n\r\n    public getStatusCode() {\r\n        return this.statusCode;\r\n    }\r\n\r\n    public getResponseBody() {\r\n        return this.data.toString();\r\n    }\r\n\r\n    public getResponseHeaders(header?: string) {\r\n        if (!header) {\r\n            return this.headers;\r\n        }\r\n\r\n        return this.headers[header];\r\n    }\r\n\r\n    public getMediaData() {\r\n        return this.data;\r\n    }\r\n\r\n    public getCharset() {\r\n        return 'utf-8';\r\n    }\r\n\r\n    public close() {\r\n        return true;\r\n    }\r\n}\r\n\r\nclass HttpRequest {\r\n    options: any;\r\n    charSet: any;\r\n    body: Buffer | null;\r\n    mimeType: any;\r\n\r\n    constructor(options: any) {\r\n        this.options = options;\r\n        this.body = null;\r\n    }\r\n\r\n    public addHeader(headerName: string, value: any) {\r\n        this.options.headers = this.options.headers || {};\r\n        this.options.headers[headerName] = value;\r\n        return this.options.headers[headerName] === value;\r\n    }\r\n\r\n    public setCharset(charSet: any) {\r\n        this.charSet = charSet;\r\n    }\r\n\r\n    public setBodyContent(content: any, mimeType: any) {\r\n        this.body = Buffer.from(content);\r\n        this.mimeType = mimeType;\r\n    }\r\n\r\n    public async executeAsyncRequest(\r\n        username?: Function,\r\n        password?: Function,\r\n        workstation?: Function,\r\n        domain?: Function,\r\n        successCallbackMethod?: Function,\r\n        errorCallbackMethod?: Function,\r\n    ) {\r\n        let successCallback = successCallbackMethod;\r\n        let errorCallback = errorCallbackMethod;\r\n        if (typeof username === 'function' && typeof password === 'function') {\r\n            successCallback = username;\r\n            errorCallback = password;\r\n        }\r\n\r\n        if (typeof workstation === 'function' && typeof domain === 'function') {\r\n            successCallback = workstation;\r\n            errorCallback = domain;\r\n        }\r\n\r\n        const client = this.options.tls ? https : http;\r\n        const req = client.request(this.options, (res) => {\r\n            let buffer: any = Buffer.alloc(0);\r\n            res.on('data', (data) => {\r\n                buffer = Buffer.concat(buffer, data);\r\n            });\r\n\r\n            res.on('end', () => {\r\n                if (successCallback) {\r\n                    successCallback(buffer);\r\n                }\r\n            });\r\n        });\r\n\r\n        req.setTimeout(this.options.timeout);\r\n        req.on('error', (e) => {\r\n            req.end();\r\n            if (errorCallback) {\r\n                errorCallback(e);\r\n            }\r\n        });\r\n\r\n        if (this.body) {\r\n            req.write(this.body, this.charSet);\r\n        }\r\n\r\n        req.end();\r\n    }\r\n\r\n    public async executeRequest(\r\n        username?: Function,\r\n        password?: Function,\r\n        workstation?: Function,\r\n        domain?: Function,\r\n    ): Promise<HttpResponse> {\r\n        return new Promise((resolve, reject) => {\r\n            const client =\r\n                this.options.tls || (this.options.protocol && this.options.protocol === 'https:')\r\n                    ? https\r\n                    : http;\r\n            this.options.headers = this.options.headers || {};\r\n            if (this.body) {\r\n                this.options.headers['Content-type'] =\r\n                    this.options.headers['Content-type'] || 'application/json';\r\n                this.options.headers['Content-length'] = this.body.length;\r\n            }\r\n\r\n            const req = client.request(this.options, (res) => {\r\n                let data = Buffer.alloc(0);\r\n                res.on('data', (newData) => {\r\n                    data = Buffer.concat([data, newData]);\r\n                });\r\n\r\n                res.on('end', () => {\r\n                    resolve(\r\n                        new HttpResponse({\r\n                            headers: res.headers,\r\n                            statusCode: res.statusCode,\r\n                            data,\r\n                        }),\r\n                    );\r\n                });\r\n            });\r\n\r\n            req.setTimeout(this.options.timeout);\r\n            req.on('error', (e) => {\r\n                req.end();\r\n                reject(e);\r\n            });\r\n\r\n            if (this.body) {\r\n                req.write(this.body, this.charSet);\r\n            }\r\n\r\n            req.end();\r\n        });\r\n    }\r\n}\r\n\r\nclass HttpClient {\r\n    static defaultTimeout: number;\r\n\r\n    constructor() {\r\n        HttpClient.defaultTimeout = 30000;\r\n    }\r\n\r\n    static createRequest(type: string, uri: string) {\r\n        const correctedUrl = uri.indexOf('http') !== 0 ? `http://${uri}` : uri;\r\n        const urlInformation = url.parse(correctedUrl);\r\n        return new HttpRequest({\r\n            timeout: this.defaultTimeout || 60000,\r\n            hostname: urlInformation.hostname,\r\n            protocol: urlInformation.protocol,\r\n            port: urlInformation.port || (urlInformation.protocol === 'https:' ? 443 : 80),\r\n            path: urlInformation.path,\r\n            method: type,\r\n        });\r\n    }\r\n\r\n    public createGetRequest(uri: string) {\r\n        return HttpClient.createRequest('GET', uri);\r\n    }\r\n\r\n    public createHeadRequest(uri: string) {\r\n        return HttpClient.createRequest('HEAD', uri);\r\n    }\r\n\r\n    public createOptionsRequest(uri: string) {\r\n        return HttpClient.createRequest('OPTIONS', uri);\r\n    }\r\n\r\n    public createPostRequest(uri: string) {\r\n        return HttpClient.createRequest('POST', uri);\r\n    }\r\n\r\n    public createPutRequest(uri: string) {\r\n        return HttpClient.createRequest('PUT', uri);\r\n    }\r\n\r\n    public createTraceRequest(uri: string) {\r\n        return HttpClient.createRequest('TRACE', uri);\r\n    }\r\n\r\n    public createDeleteRequest(uri: string) {\r\n        return HttpClient.createRequest('DELETE', uri);\r\n    }\r\n\r\n    public getCookie(cookieName: string) {\r\n        throw new Error('Not implemented.');\r\n    }\r\n\r\n    public getCookies() {\r\n        throw new Error('Not implemented.');\r\n    }\r\n\r\n    public setClientProxyCredentials(userName: string, password: string) {\r\n        throw new Error('Not implemented.');\r\n    }\r\n\r\n    public setCookie(\r\n        cookieName: string,\r\n        cookieValue: string,\r\n        domain: string,\r\n        path: string,\r\n        maxAge: number,\r\n        secure: boolean,\r\n    ) {\r\n        throw new Error('Not implemented.');\r\n    }\r\n\r\n    public setTimeout(msTimeout: number) {\r\n        HttpClient.defaultTimeout = msTimeout;\r\n    }\r\n}\r\n\r\nconst createNewHttpClient = () => new HttpClient();\r\nconst getMediaData = () => {};\r\nconst getPageData = () => {};\r\nconst HTTP_STATUS = {\r\n    SC_ACCEPTED: 202,\r\n    SC_BAD_GATEWAY: 502,\r\n    SC_BAD_REQUEST: 400,\r\n    SC_CONFLICT: 409,\r\n    SC_CONTINUE: 100,\r\n    SC_CREATED: 201,\r\n    SC_EXPECTATION_FAILED: 417,\r\n    SC_FAILED_DEPENDENCY: 424,\r\n    SC_FORBIDDEN: 403,\r\n    SC_GATEWAY_TIMEOUT: 504,\r\n    SC_GONE: 410,\r\n    SC_HTTP_VERSION_NOT_SUPPORTED: 505,\r\n    SC_INSUFFICIENT_SPACE_ON_RESOURCE: 419,\r\n    SC_INSUFFICIENT_STORAGE: 507,\r\n    SC_INTERNAL_SERVER_ERROR: 500,\r\n    SC_LENGTH_REQUIRED: 411,\r\n    SC_LOCKED: 423,\r\n    SC_METHOD_FAILURE: 420,\r\n    SC_METHOD_NOT_ALLOWED: 405,\r\n    SC_MOVED_PERMANENTLY: 301,\r\n    SC_MOVED_TEMPORARILY: 302,\r\n    SC_MULTIPLE_CHOICES: 300,\r\n    SC_MULTI_STATUS: 207,\r\n    SC_NON_AUTHORITATIVE_INFORMATION: 203,\r\n    SC_NOT_ACCEPTABLE: 406,\r\n    SC_NOT_FOUND: 404,\r\n    SC_NOT_IMPLEMENTED: 501,\r\n    SC_NOT_MODIFIED: 304,\r\n    SC_NO_CONTENT: 204,\r\n    SC_OK: 200,\r\n    SC_PARTIAL_CONTENT: 206,\r\n    SC_PAYMENT_REQUIRED: 402,\r\n    SC_PRECONDITION_FAILED: 412,\r\n    SC_PROCESSING: 102,\r\n    SC_PROXY_AUTHENTICATION_REQUIRED: 407,\r\n    SC_REQUESTED_RANGE_NOT_SATISFIABLE: 416,\r\n    SC_REQUEST_TIMEOUT: 408,\r\n    SC_REQUEST_TOO_LONG: 413,\r\n    SC_REQUEST_URI_TOO_LONG: 414,\r\n    SC_RESET_CONTENT: 205,\r\n    SC_SEE_OTHER: 303,\r\n    SC_SERVICE_UNAVAILABLE: 503,\r\n    SC_SWITCHING_PROTOCOLS: 101,\r\n    SC_TEMPORARY_REDIRECT: 307,\r\n    SC_UNAUTHORIZED: 401,\r\n    SC_UNPROCESSABLE_ENTITY: 422,\r\n    SC_UNSUPPORTED_MEDIA_TYPE: 415,\r\n    SC_USE_PROXY: 305,\r\n};\r\n\r\nexport { HTTP_STATUS, createNewHttpClient, getMediaData, getPageData };\r\n","type MailTransporter = {\r\n    sendEmail?: any;\r\n    x?: boolean;\r\n};\r\n\r\nlet implementation: MailTransporter;\r\n\r\nconst setImplementation = (mailTransporter: MailTransporter) => {\r\n    if (!mailTransporter.sendEmail || typeof mailTransporter.sendEmail !== 'function') {\r\n        throw new Error('Not a valid implementation');\r\n    }\r\n\r\n    implementation = mailTransporter;\r\n};\r\n\r\nconst createBinaryAttachment = (filename: string, data: any) => ({\r\n    filename,\r\n    content: Buffer.from(data),\r\n});\r\n\r\nconst sendMail = async (\r\n    to: string,\r\n    from: string,\r\n    subject: string,\r\n    msgText: string,\r\n    cc?: string,\r\n    bcc?: string,\r\n    attachments?: any[],\r\n    overrideProperties?: boolean,\r\n) => {\r\n    if (!implementation) {\r\n        throw new Error('No email transport defined yet. Unable to send mail.');\r\n    }\r\n\r\n    return implementation.sendEmail(\r\n        to,\r\n        from,\r\n        subject,\r\n        msgText,\r\n        cc,\r\n        bcc,\r\n        attachments,\r\n        overrideProperties,\r\n    );\r\n};\r\n\r\nconst sendBulkMail = sendMail;\r\n\r\nconst receiveMail = (\r\n    username: any,\r\n    password: any,\r\n    leaveMsgsOnServer: any,\r\n    receiveMode: any,\r\n    onlyReceiveMsgWithSentDate: any,\r\n    properties: any,\r\n) => {\r\n    throw new Error('Not implemented');\r\n};\r\n\r\nconst isValidEmailAddress = (email: string) =>\r\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n        email,\r\n    );\r\n\r\nconst getPlainMailAddresses = (addressesString: string) => {\r\n    throw new Error('Not implemented');\r\n};\r\n\r\nconst getLastSendMailExceptionMsg = () => {\r\n    throw new Error('Not implemented');\r\n};\r\n\r\nconst getMailMessage = (binaryblobOrString: Buffer | string) => {\r\n    throw new Error('Not implemented');\r\n};\r\n\r\nexport {\r\n    setImplementation,\r\n    createBinaryAttachment,\r\n    sendMail,\r\n    sendBulkMail,\r\n    receiveMail,\r\n    isValidEmailAddress,\r\n    getPlainMailAddresses,\r\n    getLastSendMailExceptionMsg,\r\n    getMailMessage,\r\n};\r\n","import * as os from 'os';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as open from 'open';\r\n\r\nclass JSFile {\r\n    filename: string;\r\n\r\n    constructor(filename: string) {\r\n        this.filename = filename;\r\n    }\r\n\r\n    public refreshInformation() {\r\n        return new Promise((resolve, reject) => {\r\n            fs.stat(this.filename, (error, info) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve(info);\r\n            });\r\n        });\r\n    }\r\n\r\n    public testForPermission(type: number) {\r\n        return new Promise((resolve, reject) => {\r\n            fs.access(this.filename, type, (err) => {\r\n                if (err) {\r\n                    resolve(false);\r\n                    return;\r\n                }\r\n\r\n                resolve(true);\r\n            });\r\n        });\r\n    }\r\n\r\n    public async canRead() {\r\n        return this.testForPermission(fs.constants.R_OK);\r\n    }\r\n\r\n    public async canWrite() {\r\n        return this.testForPermission(fs.constants.W_OK);\r\n    }\r\n\r\n    public createNewFile() {}\r\n\r\n    public deleteFile() {\r\n        fs.unlinkSync(this.filename);\r\n    }\r\n\r\n    public getAbsolutePath() {\r\n        return path.parse(path.resolve(this.filename)).dir;\r\n    }\r\n\r\n    public exists() {\r\n        return fs.existsSync(this.getAbsoluteFile());\r\n    }\r\n\r\n    public getAbsoluteFile() {\r\n        return path.resolve(this.filename);\r\n    }\r\n\r\n    public getContentType() {\r\n        return 'application/octet-stream';\r\n    }\r\n\r\n    public getName() {\r\n        return path.parse(this.filename).base;\r\n    }\r\n\r\n    public getParent() {}\r\n\r\n    public getParentFile() {}\r\n\r\n    public getPath() {\r\n        return path.parse(path.resolve(this.filename)).dir;\r\n    }\r\n\r\n    public isAbsolute() {\r\n        return path.resolve(this.filename) === this.filename;\r\n    }\r\n\r\n    public isDirectory() {\r\n        return fs.existsSync(this.filename) && fs.lstatSync(this.filename).isDirectory();\r\n    }\r\n\r\n    public isFile() {\r\n        return fs.existsSync(this.filename) && fs.lstatSync(this.filename).isFile();\r\n    }\r\n\r\n    public isHidden() {\r\n        return false;\r\n    }\r\n\r\n    public lastModified() {\r\n        return fs.statSync(this.filename).mtime;\r\n    }\r\n\r\n    public list() {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public listFiles() {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public mkdir() {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public mkdirs() {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public renameTo() {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public async getBytes(): Promise<any> {\r\n        if (!this.exists()) {\r\n            return Buffer.from([]);\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            fs.readFile(this.getAbsoluteFile(), (error, data) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve(data);\r\n            });\r\n        });\r\n    }\r\n\r\n    public setBytes(bytes: any, createFile: boolean) {\r\n        if (!this.exists() && !createFile) {\r\n            return false;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const stream = fs.createWriteStream(this.getAbsoluteFile(), {});\r\n            stream.on('finish', () => resolve(true));\r\n            stream.on('error', (error) => reject(error));\r\n            if (bytes) {\r\n                stream.write(Buffer.from(bytes));\r\n            }\r\n            stream.end();\r\n        });\r\n    }\r\n\r\n    public setLastModified() {\r\n        return false;\r\n    }\r\n\r\n    public setReadOnly() {\r\n        return false;\r\n    }\r\n\r\n    public size() {\r\n        const stats = fs.statSync(this.filename);\r\n        return stats.size;\r\n    }\r\n}\r\n\r\nconst appendToTXTFile = async (file: string | JSFile, content: any) => {\r\n    const jsfile: JSFile = file instanceof JSFile ? file : new JSFile(file);\r\n    const oldcontent = await jsfile.getBytes();\r\n    return jsfile.setBytes(Buffer.concat([oldcontent, Buffer.from(content)]), true);\r\n};\r\n\r\nconst convertToRemoteJSFile = (filename: string) => new JSFile(filename);\r\n\r\nconst copyFile = (source: fs.PathLike, target: fs.PathLike): Promise<void> =>\r\n    new Promise((resolve, reject) => {\r\n        let cbCalled = false;\r\n        function done(error?: any) {\r\n            if (!cbCalled) {\r\n                cbCalled = true;\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve();\r\n            }\r\n        }\r\n\r\n        const readableStream = fs.createReadStream(source);\r\n        readableStream.on('error', (err) => {\r\n            done(err);\r\n        });\r\n\r\n        const writableStream = fs.createWriteStream(target);\r\n        writableStream.on('error', (error) => {\r\n            done(error);\r\n        });\r\n\r\n        writableStream.on('close', () => {\r\n            done();\r\n        });\r\n\r\n        readableStream.pipe(writableStream);\r\n    });\r\n\r\nconst copyFolder = () => {};\r\nconst createFile = convertToRemoteJSFile;\r\nconst createFolder = () => {};\r\n\r\nconst createTempFile = async (prefix: string, postfix: string) => {\r\n    const temporaryFilename = path.join(\r\n        os.tmpdir(),\r\n        `${prefix}${(Math.random() * 1000000).toFixed(0)}${postfix}`,\r\n    );\r\n    const temporaryFile = new JSFile(temporaryFilename);\r\n    await temporaryFile.setBytes(null, true);\r\n    return temporaryFile;\r\n};\r\n\r\nconst deleteFile = (file: string | JSFile): Promise<void> => {\r\n    const fullpath = file instanceof JSFile ? file.getAbsoluteFile() : file;\r\n    return new Promise((resolve, reject) => {\r\n        fs.unlink(fullpath, (error) => {\r\n            if (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n\r\n            resolve();\r\n        });\r\n    });\r\n};\r\n\r\nconst deleteFolder = (deletePath: string): Promise<void> =>\r\n    new Promise((resolve, reject) => {\r\n        fs.rmdir(deletePath, (err) => {\r\n            if (err) {\r\n                reject(err);\r\n                return;\r\n            }\r\n\r\n            resolve();\r\n        });\r\n    });\r\n\r\nconst getDefaultUploadLocation = () => os.tmpdir();\r\nconst getDesktopFolder = () => {};\r\nconst getDiskList = () => {};\r\nconst getFileSize = () => {};\r\nconst getFolderContents = () => {};\r\nconst getHomeFolder = () => {};\r\nconst getModificationDate = () => {};\r\nconst getRemoteFolderContents = () => {};\r\n\r\nconst moveFile = (oldPath: fs.PathLike, newPath: fs.PathLike): Promise<void> =>\r\n    new Promise((resolve, reject) => {\r\n        fs.rename(oldPath, newPath, (err) => {\r\n            if (err) {\r\n                reject(err);\r\n                return;\r\n            }\r\n\r\n            resolve();\r\n        });\r\n    });\r\n\r\nconst openFile = (jsfile: JSFile) => {\r\n    open(jsfile.getAbsoluteFile());\r\n};\r\n\r\nconst readFile = async (file: string | JSFile, size?: number): Promise<Buffer> =>\r\n    new Promise((resolve, reject) => {\r\n        const filename = file instanceof JSFile ? file.getAbsoluteFile() : file;\r\n        fs.readFile(filename, (error, data) => {\r\n            if (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n\r\n            if (size && data.length > size) {\r\n                resolve(data.slice(0, size));\r\n            }\r\n\r\n            resolve(data);\r\n        });\r\n    });\r\n\r\nconst readTXTFile = async (file: string | JSFile) => {\r\n    const contents = await readFile(file);\r\n    return contents.toString();\r\n};\r\n\r\nconst streamFilesFromServer = () => {};\r\nconst streamFilesToServer = () => {};\r\n\r\nconst writeFile = (file: string | JSFile, content: any) => {\r\n    const jsfile: JSFile = file instanceof JSFile ? file : new JSFile(file);\r\n    return jsfile.setBytes(content, true);\r\n};\r\n\r\nconst writeTXTFile = writeFile;\r\n\r\nconst convertToJSFile = convertToRemoteJSFile;\r\n\r\nexport {\r\n    JSFile,\r\n    appendToTXTFile,\r\n    convertToRemoteJSFile,\r\n    copyFile,\r\n    copyFolder,\r\n    createFile,\r\n    createFolder,\r\n    createTempFile,\r\n    deleteFile,\r\n    deleteFolder,\r\n    getDefaultUploadLocation,\r\n    getDesktopFolder,\r\n    getDiskList,\r\n    getFileSize,\r\n    getFolderContents,\r\n    getHomeFolder,\r\n    getModificationDate,\r\n    getRemoteFolderContents,\r\n    moveFile,\r\n    openFile,\r\n    readFile,\r\n    readTXTFile,\r\n    streamFilesFromServer,\r\n    streamFilesToServer,\r\n    writeFile,\r\n    writeTXTFile,\r\n    convertToJSFile,\r\n};\r\n","import { DatabaseManager } from '../DatabaseManager';\r\n\r\nconst executeSQL = async (serverName: string, table: string, sql: string) => {\r\n    try {\r\n        const databaseManager = new DatabaseManager().getInstance();\r\n        const result = await databaseManager.getDataSetByQuery(serverName, sql, [], -1);\r\n        return result !== null;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport { executeSQL };\r\n","enum TokenType {\r\n    IDENTIFIER = 1,\r\n    BRACKET_OPEN = 2,\r\n    BRACKET_CLOSE = 3,\r\n    CURLY_OPEN = 4,\r\n    CURLY_CLOSE = 5,\r\n    DOUBLEQUOTE = 6,\r\n    COMMA = 7,\r\n    COLON = 8,\r\n    NUMBER = 9,\r\n    CARRIAGERETURN = 10,\r\n    LINEFEED = 11,\r\n    STRING = 12,\r\n    BOOLEAN = 13,\r\n    NULL = 14,\r\n    WHITESPACE = 15,\r\n}\r\n\r\ntype Token = {\r\n    type: TokenType;\r\n    value?: any;\r\n};\r\n\r\ntype State = {\r\n    tokens: Token[];\r\n    pos: number;\r\n};\r\n\r\nconst tokenizer = (code: string) => {\r\n    const tokens = [];\r\n    let pos = 0;\r\n    const parseIdentifier = () => {\r\n        let value = '';\r\n        while (/[a-zA-Z\\-_0-9]/.test(code[pos]) && pos < code.length) {\r\n            value += code[pos];\r\n            pos += 1;\r\n        }\r\n\r\n        if (value === 'true' || value === 'false') {\r\n            tokens.push({\r\n                type: TokenType.BOOLEAN,\r\n                value: value === 'true',\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (value === 'null') {\r\n            tokens.push({\r\n                type: TokenType.NULL,\r\n            });\r\n            return;\r\n        }\r\n\r\n        tokens.push({\r\n            type: TokenType.IDENTIFIER,\r\n            value,\r\n        });\r\n    };\r\n\r\n    const parseNumber = () => {\r\n        let value = '';\r\n        while (/[-0-9]/.test(code[pos]) && pos < code.length) {\r\n            value += code[pos];\r\n            pos += 1;\r\n        }\r\n\r\n        tokens.push({\r\n            type: TokenType.NUMBER,\r\n            value: parseFloat(value),\r\n        });\r\n    };\r\n\r\n    const stringValue = () => {\r\n        let value = '';\r\n        pos += 1;\r\n        while (code[pos] !== '\"' && pos < code.length) {\r\n            if (code[pos] === '\\\\') {\r\n                pos += 1;\r\n            }\r\n\r\n            value += code[pos];\r\n            pos += 1;\r\n        }\r\n\r\n        pos += 1;\r\n        tokens.push({\r\n            type: TokenType.STRING,\r\n            value,\r\n        });\r\n    };\r\n\r\n    const matchCharacter = (character: string, type: TokenType, optional: boolean) => {\r\n        if (code[pos] === character) {\r\n            tokens.push({\r\n                type,\r\n            });\r\n            pos += 1;\r\n            return;\r\n        }\r\n\r\n        if (!optional) {\r\n            throw new Error(`Expected character ${character}`);\r\n        }\r\n    };\r\n\r\n    let counter = 0;\r\n    while (pos < code.length) {\r\n        counter += 1;\r\n        while (code.charCodeAt(pos) === 32 || code.charCodeAt(pos) === 9) {\r\n            tokens.push({\r\n                type: TokenType.WHITESPACE,\r\n            });\r\n            pos += 1;\r\n        }\r\n        matchCharacter('\\r', TokenType.CARRIAGERETURN, true);\r\n        matchCharacter('\\n', TokenType.LINEFEED, true);\r\n        matchCharacter('[', TokenType.BRACKET_OPEN, true);\r\n        matchCharacter(']', TokenType.BRACKET_CLOSE, true);\r\n        matchCharacter('{', TokenType.CURLY_OPEN, true);\r\n        matchCharacter('}', TokenType.CURLY_CLOSE, true);\r\n        matchCharacter(',', TokenType.COMMA, true);\r\n        matchCharacter(':', TokenType.COLON, true);\r\n        if (code[pos] === '\"') {\r\n            stringValue();\r\n            continue;\r\n        }\r\n\r\n        if (/[a-zA-Z]/.test(code[pos])) {\r\n            parseIdentifier();\r\n            continue;\r\n        }\r\n\r\n        if (/[-0-9]/.test(code[pos])) {\r\n            parseNumber();\r\n            continue;\r\n        }\r\n\r\n        if (counter > code.length) {\r\n            throw new Error(`Stuck tokenizing: position ${pos} (${code.charCodeAt(pos)})`);\r\n        }\r\n    }\r\n    return tokens;\r\n};\r\n\r\nconst tokenToString = (token: Token) => {\r\n    if (token.type === TokenType.IDENTIFIER) {\r\n        return token.value;\r\n    }\r\n\r\n    if (token.type === TokenType.NUMBER) {\r\n        return token.value;\r\n    }\r\n\r\n    if (token.type === TokenType.STRING) {\r\n        return `\"${token.value}\"`;\r\n    }\r\n\r\n    if (token.type === TokenType.COLON) {\r\n        return ':';\r\n    }\r\n\r\n    if (token.type === TokenType.COMMA) {\r\n        return ',';\r\n    }\r\n\r\n    if (token.type === TokenType.BRACKET_OPEN) {\r\n        return '[';\r\n    }\r\n\r\n    if (token.type === TokenType.BRACKET_CLOSE) {\r\n        return ']';\r\n    }\r\n\r\n    if (token.type === TokenType.CURLY_OPEN) {\r\n        return '{';\r\n    }\r\n\r\n    if (token.type === TokenType.CURLY_CLOSE) {\r\n        return '}';\r\n    }\r\n\r\n    if (token.type === TokenType.DOUBLEQUOTE) {\r\n        return '\"';\r\n    }\r\n\r\n    if (token.type === TokenType.CARRIAGERETURN) {\r\n        return '\\r';\r\n    }\r\n\r\n    if (token.type === TokenType.LINEFEED) {\r\n        return '\\n';\r\n    }\r\n\r\n    if (token.type === TokenType.BOOLEAN) {\r\n        return token.value;\r\n    }\r\n\r\n    if (token.type === TokenType.NULL) {\r\n        return '\"null\"';\r\n    }\r\n\r\n    return '';\r\n};\r\n\r\nconst expectIdentifier = (state: State) => {\r\n    if (state.tokens[state.pos].type !== TokenType.IDENTIFIER) {\r\n        throw new Error('Expected identifier');\r\n    }\r\n\r\n    return state.tokens[state.pos++].value;\r\n};\r\n\r\nconst expectType = (state: State, type: TokenType) => {\r\n    if (state.tokens[state.pos].type !== type) {\r\n        throw new Error(`Expected type ${type} but got ${state.tokens[state.pos].type}`);\r\n    }\r\n\r\n    state.pos++;\r\n};\r\n\r\nconst nextIs = (state: State, type: TokenType) =>\r\n    state.pos < state.tokens.length && state.tokens[state.pos].type === type;\r\n\r\nconst eatWhitespace = (state: State) => {\r\n    while (nextIs(state, TokenType.WHITESPACE)) {\r\n        expectType(state, TokenType.WHITESPACE);\r\n    }\r\n};\r\n\r\nconst expectValue = (state: State): any => {\r\n    if (nextIs(state, TokenType.BRACKET_OPEN)) {\r\n        expectType(state, TokenType.BRACKET_OPEN);\r\n        const array = [];\r\n        let continueLoop = true;\r\n        while (continueLoop && !nextIs(state, TokenType.BRACKET_CLOSE)) {\r\n            array.push(expectValue(state));\r\n            continueLoop = nextIs(state, TokenType.COMMA);\r\n            if (continueLoop) {\r\n                expectType(state, TokenType.COMMA);\r\n            }\r\n        }\r\n        expectType(state, TokenType.BRACKET_CLOSE);\r\n        return array;\r\n    }\r\n\r\n    if (nextIs(state, TokenType.CURLY_OPEN)) {\r\n        const obj = expectObject(state);\r\n        return obj;\r\n    }\r\n\r\n    if (\r\n        state.tokens[state.pos].type !== TokenType.NULL &&\r\n        state.tokens[state.pos].type !== TokenType.BOOLEAN &&\r\n        state.tokens[state.pos].type !== TokenType.NUMBER &&\r\n        state.tokens[state.pos].type !== TokenType.STRING\r\n    ) {\r\n        throw new Error(`Expected value but got ${state.tokens[state.pos].type}`);\r\n    }\r\n\r\n    return state.tokens[state.pos++].value;\r\n};\r\n\r\nconst expectObject = (state: State) => {\r\n    expectType(state, TokenType.CURLY_OPEN);\r\n    const object: any = {};\r\n    let continueLoop = true;\r\n    while (continueLoop && !nextIs(state, TokenType.CURLY_CLOSE)) {\r\n        const propertyName = expectIdentifier(state);\r\n        eatWhitespace(state);\r\n        expectType(state, TokenType.COLON);\r\n        eatWhitespace(state);\r\n        object[propertyName] = expectValue(state);\r\n        if (nextIs(state, TokenType.COMMA)) {\r\n            expectType(state, TokenType.COMMA);\r\n        } else {\r\n            continueLoop = false;\r\n        }\r\n    }\r\n    expectType(state, TokenType.CURLY_CLOSE);\r\n    return object;\r\n};\r\n\r\nconst parser = (tokens: Token[]) => {\r\n    const state = {\r\n        pos: 0,\r\n        tokens: tokens\r\n            .filter((token: Token) => token.type !== TokenType.LINEFEED)\r\n            .filter((token: Token) => token.type !== TokenType.CARRIAGERETURN),\r\n    };\r\n    const object: any = {};\r\n    let continueLoop = true;\r\n    if (nextIs(state, TokenType.DOUBLEQUOTE)) {\r\n        expectType(state, TokenType.DOUBLEQUOTE);\r\n    }\r\n    while (continueLoop) {\r\n        const propertyName = expectIdentifier(state);\r\n        eatWhitespace(state);\r\n        expectType(state, TokenType.COLON);\r\n        eatWhitespace(state);\r\n        object[propertyName] = expectValue(state);\r\n        if (nextIs(state, TokenType.COMMA)) {\r\n            expectType(state, TokenType.COMMA);\r\n        } else {\r\n            continueLoop = false;\r\n        }\r\n    }\r\n    if (nextIs(state, TokenType.DOUBLEQUOTE)) {\r\n        expectType(state, TokenType.DOUBLEQUOTE);\r\n    }\r\n    return object;\r\n};\r\n\r\nconst read = (code: string): any => {\r\n    const tokens = tokenizer(code);\r\n    return parser(tokens);\r\n};\r\n\r\nexport { tokenToString, read };\r\n","import * as globals from './globals';\r\nimport { JSColumn } from './JSColumn';\r\nimport { JSDataSet } from './JSDataSet';\r\nimport { JSFoundSet } from './JSFoundSet';\r\nimport { DatabaseManager } from './DatabaseManager';\r\nimport * as application from './application';\r\nimport * as utils from './utils';\r\nimport * as constants from './constants';\r\nimport * as datasources from './datasources';\r\nimport * as http from './plugins/http';\r\nimport * as mail from './plugins/mail';\r\nimport * as file from './plugins/file';\r\nimport * as rawSQL from './plugins/rawSQL';\r\nimport * as parser from './utils/parser';\r\n\r\nconst plugins = {\r\n    mail,\r\n    http,\r\n    file,\r\n    rawSQL,\r\n};\r\n\r\nexport {\r\n    constants,\r\n    DatabaseManager,\r\n    JSColumn,\r\n    JSDataSet,\r\n    JSFoundSet,\r\n    application,\r\n    globals,\r\n    utils,\r\n    datasources,\r\n    parser,\r\n    plugins,\r\n};\r\n"],"mappings":"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","names":["JSColumn","type","DatabaseManager","LOGGINGLEVEL","APPLICATION_TYPES","resolve","resolve","resolve","type","path","readFile","os","resolve","type","createFile","sql","type"]}